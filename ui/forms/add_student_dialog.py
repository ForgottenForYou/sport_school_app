# ui/forms/add_student_dialog.py
from PyQt5.QtWidgets import QDialog, QFormLayout, QLineEdit, QComboBox, QPushButton, QHBoxLayout, QCheckBox, \
    QMessageBox, QCalendarWidget, QVBoxLayout
from PyQt5.QtCore import QDate
from datetime import datetime
import re


class DatePickerDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É")
        self.layout = QVBoxLayout()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º QCalendarWidget –≤–º–µ—Å—Ç–æ QDateEdit
        self.calendar = QCalendarWidget()
        self.calendar.setSelectedDate(QDate.currentDate())
        self.layout.addWidget(self.calendar)

        self.save_button = QPushButton("–í—ã–±—Ä–∞—Ç—å")
        self.save_button.clicked.connect(self.accept)
        self.layout.addWidget(self.save_button)

        self.setLayout(self.layout)

    def get_date(self):
        selected_date = self.calendar.selectedDate()
        return selected_date.toString("dd/MM/yyyy")


class AddStudentDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
        self.layout = QFormLayout()

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.name_input = QLineEdit()
        self.department_combo = QComboBox()
        self.department_combo.addItems([
            "–ë–æ–∫—Å", "–õ—ë–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞", "–ì–∏—Ä–µ–≤–æ–π —Å–ø–æ—Ä—Ç", "–ì—Ä–µ–∫–æ-—Ä–∏–º—Å–∫–∞—è –±–æ—Ä—å–±–∞",
            "–î–∑—é–¥–æ", "–°–∞–º–±–æ", "–ü—É–ª–µ–≤–∞—è —Å—Ç—Ä–µ–ª—å–±–∞", "–ü–ª–∞–≤–∞–Ω–∏–µ", "–ü–æ–ª–∏–∞—Ç–ª–æ–Ω", "–®–∞—Ö–º–∞—Ç—ã"
        ])
        self.birth_date_input = QLineEdit()
        self.birth_date_input.setPlaceholderText("–î–î/–ú–ú/–ì–ì–ì–ì")
        self.birth_date_button = QPushButton("üìÖ")
        self.birth_date_button.setFixedWidth(30)
        self.birth_date_button.clicked.connect(lambda: self.show_date_picker(self.birth_date_input))
        self.group_input = QLineEdit()
        self.trainer_input = QLineEdit()
        self.school_input = QLineEdit()
        self.rank_input = QLineEdit()
        self.rank_date_input = QLineEdit()
        self.rank_date_input.setPlaceholderText("–î–î/–ú–ú/–ì–ì–ì–ì")
        self.rank_date_button = QPushButton("üìÖ")
        self.rank_date_button.setFixedWidth(30)
        self.rank_date_button.clicked.connect(lambda: self.show_date_picker(self.rank_date_input))
        self.snils_input = QLineEdit()
        self.snils_input.setPlaceholderText("XXX-XXX-XXX XX")
        self.passport_input = QLineEdit()
        self.enrollment_date_input = QLineEdit()
        self.enrollment_date_input.setPlaceholderText("–î–î/–ú–ú/–ì–ì–ì–ì")
        self.enrollment_date_button = QPushButton("üìÖ")
        self.enrollment_date_button.setFixedWidth(30)
        self.enrollment_date_button.clicked.connect(lambda: self.show_date_picker(self.enrollment_date_input))
        self.medical_clearance_checkbox = QCheckBox("–ü—Ä–æ—à—ë–ª –º–µ–¥–æ—Å–º–æ—Ç—Ä")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º—É
        self.layout.addRow("–ò–º—è:", self.name_input)
        self.layout.addRow("–û—Ç–¥–µ–ª–µ–Ω–∏–µ:", self.department_combo)
        birth_date_layout = QHBoxLayout()
        birth_date_layout.addWidget(self.birth_date_input)
        birth_date_layout.addWidget(self.birth_date_button)
        self.layout.addRow("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:", birth_date_layout)
        self.layout.addRow("–ì—Ä—É–ø–ø–∞:", self.group_input)
        self.layout.addRow("–¢—Ä–µ–Ω–µ—Ä:", self.trainer_input)
        self.layout.addRow("–®–∫–æ–ª–∞:", self.school_input)
        self.layout.addRow("–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ä–∞–∑—Ä—è–¥:", self.rank_input)
        rank_date_layout = QHBoxLayout()
        rank_date_layout.addWidget(self.rank_date_input)
        rank_date_layout.addWidget(self.rank_date_button)
        self.layout.addRow("–î–∞—Ç–∞ —Ä–∞–∑—Ä—è–¥–∞:", rank_date_layout)
        self.layout.addRow("–°–ù–ò–õ–°:", self.snils_input)
        self.layout.addRow("–ü–∞—Å–ø–æ—Ä—Ç:", self.passport_input)
        enrollment_date_layout = QHBoxLayout()
        enrollment_date_layout.addWidget(self.enrollment_date_input)
        enrollment_date_layout.addWidget(self.enrollment_date_button)
        self.layout.addRow("–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:", enrollment_date_layout)
        self.layout.addRow("–ú–µ–¥–æ—Å–º–æ—Ç—Ä:", self.medical_clearance_checkbox)

        self.save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_button.clicked.connect(self.accept)
        self.layout.addWidget(self.save_button)
        self.setLayout(self.layout)

    def show_date_picker(self, line_edit):
        dialog = DatePickerDialog(self)
        if dialog.exec_():
            selected_date = dialog.get_date()
            line_edit.setText(selected_date)
            if line_edit == self.birth_date_input:
                self.calculate_age()

    def calculate_age(self):
        birth_date_str = self.birth_date_input.text()
        if birth_date_str and re.match(r'^\d{2}/\d{2}/\d{4}$', birth_date_str):
            try:
                birth_date = datetime.strptime(birth_date_str, '%d/%m/%Y')
                today = datetime.now()
                age = today.year - birth_date.year
                if today.month < birth_date.month or (today.month == birth_date.month and today.day < birth_date.day):
                    age -= 1
                return str(age)
            except ValueError:
                return ""
        return ""

    def validate_snils(self, snils):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –°–ù–ò–õ–°."""
        if not re.match(r'^\d{11}$', snils):
            return False
        digits = [int(d) for d in snils]
        checksum = sum(d * w for d, w in zip(digits[:9], [9, 8, 7, 6, 5, 4, 3, 2, 1]))
        checksum = checksum % 101 % 100
        return checksum == int(snils[-2:])

    def clean_snils(self, snils):
        """–û—á–∏—â–∞–µ—Ç –°–ù–ò–õ–° –æ—Ç –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤."""
        return ''.join(c for c in snils if c.isdigit())

    def get_data(self):
        name = self.name_input.text()
        if not re.match(r'^[–ê-–Ø–∞-—è–Å—ë\s-]+$', name):
            raise ValueError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã")
        department = self.department_combo.currentText()
        if not department:
            raise ValueError("–û—Ç–¥–µ–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞")

        date_pattern = r'^\d{2}/\d{2}/\d{4}$'
        current_date = datetime.now()
        dates = [
            ("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", self.birth_date_input.text(), True),
            ("–î–∞—Ç–∞ —Ä–∞–∑—Ä—è–¥–∞", self.rank_date_input.text(), False),
            ("–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è", self.enrollment_date_input.text(), True)
        ]
        for field_name, date, required in dates:
            if required and not date:
                raise ValueError(f"{field_name} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
            if date:
                if not re.match(date_pattern, date):
                    raise ValueError(f"{field_name} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î/–ú–ú/–ì–ì–ì–ì")
                try:
                    parsed_date = datetime.strptime(date, '%d/%m/%Y')
                    if field_name == "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" and parsed_date > current_date:
                        raise ValueError("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
                    if field_name in ["–î–∞—Ç–∞ —Ä–∞–∑—Ä—è–¥–∞", "–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è"] and parsed_date > current_date:
                        raise ValueError(f"{field_name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
                except ValueError as e:
                    if "time data" in str(e):
                        raise ValueError(f"{field_name} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—É—é –¥–∞—Ç—É")
                    raise e

        snils_input = self.snils_input.text().strip()
        snils = ""
        if snils_input:
            if not re.match(r'^\d{3}-\d{3}-\d{3}\s\d{2}$', snils_input):
                raise ValueError("–°–ù–ò–õ–° –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX-XXX-XXX XX")
            snils = self.clean_snils(snils_input)
            if not self.validate_snils(snils):
                raise ValueError("–°–ù–ò–õ–° –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞)")

        passport = self.passport_input.text()
        if passport and not re.match(r'^\d{4}\s\d{6}$', passport):
            raise ValueError("–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXX XXXXXX")

        medical_clearance = 1 if self.medical_clearance_checkbox.isChecked() else 0
        age = self.calculate_age()

        return (name, age, self.birth_date_input.text(),
                self.department_combo.currentText(), self.group_input.text(),
                self.trainer_input.text(), self.school_input.text(),
                self.rank_input.text(), self.rank_date_input.text(), snils,
                passport, self.enrollment_date_input.text(), medical_clearance)


class EditStudentDialog(AddStudentDialog):
    def __init__(self, student_data):
        super().__init__()
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–Ω–∏–∫–∞")
        self.student_id = student_data[0]  # ID —É—á–µ–Ω–∏–∫–∞
        self.name_input.setText(student_data[1])
        self.department_combo.setCurrentText(student_data[4])
        self.birth_date_input.setText(student_data[3])
        self.group_input.setText(student_data[5])
        self.trainer_input.setText(student_data[6])
        self.school_input.setText(student_data[7])
        self.rank_input.setText(student_data[8])
        self.rank_date_input.setText(student_data[9])
        self.snils_input.setText(student_data[10])
        self.passport_input.setText(student_data[11])
        self.enrollment_date_input.setText(student_data[12])
        self.medical_clearance_checkbox.setChecked(bool(student_data[13]))

    def get_data(self):
        data = super().get_data()
        return (self.student_id,) + data